version: '3'
services:
  # Frontend web server that serves the checkout UI
  frontend:
    build:
      # Context is project root to access all necessary files
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Maps container port 80 to host port 8080
      - "8080:80"
    volumes:
      # Mount frontend source for live development
      - ./frontend/src:/usr/share/nginx/html
    networks:
      - app-network

  # API gateway that orchestrates the transaction flow
  orchestrator:
    build:
      context: ./
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Maps container port 5000 to host port 8081
      - 8081:5000
    environment:
      # Ensures logs are not buffered, making debugging easier
      - PYTHONUNBUFFERED=TRUE
      # Specifies the application's entry point
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount shared protocol buffers
      - ./utils:/app/utils
      # Mount orchestrator source for live development
      - ./orchestrator/src:/app/orchestrator/src
    networks:
      - app-network
  
  # Service that evaluates transactions for potential fraud
  fraud_detection:
    build:
      context: ./
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      - 50051:50051
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/fraud_detection/src/app.py
    env_file:
      # Configuration variables like API keys
      - variables.env
    volumes:
      - ./utils:/app/utils
      - ./fraud_detection/src:/app/fraud_detection/src
    networks:
      - app-network

  # Service that validates transaction data integrity
  transaction_verification:
    build:
      context: ./
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      - 50052:50052
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./transaction_verification/src:/app/transaction_verification/src
    networks:
      - app-network

  # Service that provides book recommendations
  suggestions:
    build:
      context: ./
      dockerfile: ./suggestions/Dockerfile
    ports:
      - 50053:50053
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/suggestions/src/app.py
    env_file:
      - variables.env
    volumes:
      - ./utils:/app/utils
      - ./suggestions/src:/app/suggestions/src
    networks:
      - app-network

  # Queue service for buffering approved orders
  order_queue:
    build:
      context: ./
      dockerfile: ./order_queue/Dockerfile
    ports:
      - "50054:50054"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_queue/src/app.py
    volumes:
      - ./order_queue/src:/app/order_queue/src
      - ./utils:/app/utils
    networks:
      - app-network

  # First instance in the order executor cluster
  order_executor_1:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50055:50055"
    volumes:
      - ./order_executor/src:/app/order_executor/src
      - ./utils:/app/utils
    environment:
      # Unique executor ID for leader election
      - EXECUTOR_ID=executor1
      # Other peers in the cluster for coordination
      - EXECUTOR_PEERS=order_executor_2:50055,order_executor_3:50055
      # Queue service address
      - QUEUE_SERVICE=order_queue:50054
    depends_on:
      - order_queue
    networks:
      - app-network

  # Second instance in the order executor cluster
  order_executor_2:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50056:50055"
    volumes:
      - ./order_executor/src:/app/order_executor/src
      - ./utils:/app/utils
    environment:
      - EXECUTOR_ID=executor2
      - EXECUTOR_PEERS=order_executor_1:50055,order_executor_3:50055
      - QUEUE_SERVICE=order_queue:50054
    depends_on:
      - order_queue
    networks:
      - app-network

  # Third instance in the order executor cluster
  order_executor_3:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50057:50055"
    volumes:
      - ./order_executor/src:/app/order_executor/src
      - ./utils:/app/utils
    environment:
      - EXECUTOR_ID=executor3
      - EXECUTOR_PEERS=order_executor_1:50055,order_executor_2:50055
      - QUEUE_SERVICE=order_queue:50054
    depends_on:
      - order_queue
    networks:
      - app-network
    
# Shared network for inter-service communication
networks:
  app-network:
    driver: bridge