syntax = "proto3";

package books_database;

service BooksDatabaseService {
    // Reads the value of a book's stock
    rpc ReadStock(ReadStockRequest) returns (ReadStockResponse);
    // Writes/sets the value of a book's stock (less common, Decrement is preferred)
    rpc WriteStock(WriteStockRequest) returns (WriteStockResponse);
    // Atomically decrements the stock of a book
    rpc DecrementStock(DecrementStockRequest) returns (DecrementStockResponse);

    // --- Raft related RPCs for this DB service's own Raft group ---
    // (These can be similar to order_executor's Raft RPCs)
    rpc RequestVote(DBVoteRequest) returns (DBVoteResponse);
    rpc AppendEntries(DBAppendEntriesRequest) returns (DBAppendEntriesResponse); // For heartbeats and leader election

    // --- Internal RPC for Primary to replicate data to Backups ---
    rpc InternalReplicate(InternalReplicateRequest) returns (InternalReplicateResponse);

    // --- Helper to find current leader of this DB Raft group ---
    rpc GetNodeRole(GetNodeRoleRequest) returns (GetNodeRoleResponse);

    // --- 2PC Transaction RPCs ---
    rpc PrepareTransaction(DBPrepareRequest) returns (DBVoteTransactionResponse);
    rpc CommitTransaction(DBTransactionRequest) returns (DBAckTransactionResponse);
    rpc AbortTransaction(DBTransactionRequest) returns (DBAckTransactionResponse);
}

// --- Enums for 2PC ---
enum DBVoteStatus {
    DB_VOTE_UNSPECIFIED = 0;
    DB_VOTE_COMMIT = 1;
    DB_VOTE_ABORT = 2;
}

enum DBAckStatus {
    DB_ACK_UNSPECIFIED = 0;
    DB_ACK_SUCCESS = 1;
    DB_ACK_FAILURE = 2;
}

// --- Messages for 2PC ---
message BookOperation {
    string book_id = 1;
    int32 quantity_change = 2; // Negative for decrement, positive for increment (if needed)
    // Potentially add current_expected_stock for optimistic concurrency control if needed
}

message DBPrepareRequest {
    string transaction_id = 1;
    repeated BookOperation operations = 2; // List of book stock changes for this transaction
}

message DBVoteTransactionResponse { // Renamed to avoid conflict with DBVoteResponse for Raft
    string transaction_id = 1;
    DBVoteStatus vote = 2;
    string message = 3; // Optional: for conveying reasons for abort
}

message DBTransactionRequest {
    string transaction_id = 1;
}

message DBAckTransactionResponse { // Renamed to avoid conflict
    string transaction_id = 1;
    DBAckStatus status = 2;
    string message = 3; // Optional: for conveying status messages
}

// --- Stock Operations ---
message BookStock {
    string book_id = 1; // Using book_id as key
    int32 quantity = 2;
}

message ReadStockRequest {
    string book_id = 1;
}

message ReadStockResponse {
    string book_id = 1;
    int32 quantity = 2;
    bool success = 3;
    string message = 4; // e.g., "Book not found", "Success"
}

message WriteStockRequest {
    string book_id = 1;
    int32 quantity = 2;
}

message WriteStockResponse {
    bool success = 1;
    string message = 2;
}

message DecrementStockRequest {
    string book_id = 1;
    int32 amount_to_decrement = 2;
}

message DecrementStockResponse {
    string book_id = 1;
    int32 new_quantity = 2;
    bool success = 3; // false if insufficient stock or other errors
    string message = 4;
}

message IncrementStockRequest {
    string book_id = 1;
    int32 amount_to_increment = 2;
}
message IncrementStockResponse {
    string book_id = 1;
    int32 new_quantity = 2;
    bool success = 3;
    string message = 4;
}
// --- Raft related messages for DB ---
message DBVoteRequest {
    int32 term = 1;
    string candidate_id = 2;
    // Potentially lastLogIndex, lastLogTerm if implementing full Raft log for DB state
    // For now, focusing on leader election Raft.
}

message DBVoteResponse {
    int32 term = 1;
    bool vote_granted = 2;
}

message DBLogEntry { // Example if we were replicating ops via Raft log
    string operation = 1; // "WRITE", "DECREMENT"
    string book_id = 2;
    int32 value = 3; // quantity for WRITE, amount for DECREMENT
}

message DBAppendEntriesRequest {
    int32 term = 1;
    string leader_id = 2;
    // repeated DBLogEntry entries = 3; // For full Raft
    // int32 prev_log_index = 4;
    // int32 prev_log_term = 5;
    // int32 leader_commit = 6;
}

message DBAppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
}

// --- Internal Replication ---
message InternalReplicateRequest {
    string book_id = 1;
    int32 new_quantity = 2;
    string operation_id = 3; // For tracking/idempotency if needed
}

message InternalReplicateResponse {
    bool success = 1;
    string node_id = 2;
}

// --- Node Role ---
message GetNodeRoleRequest {}

message GetNodeRoleResponse {
    string node_id = 1;
    string role = 2; // "leader", "follower", "candidate"
    int32 term = 3;
    string leader_id = 4; // Current known leader, empty if unknown
}
