# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc


import books_database_pb2 as books__database_dot_books__database__pb2

class BooksDatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadStock = channel.unary_unary(
                '/books_database.BooksDatabaseService/ReadStock',
                request_serializer=books__database_dot_books__database__pb2.ReadStockRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.ReadStockResponse.FromString,
                )
        self.WriteStock = channel.unary_unary(
                '/books_database.BooksDatabaseService/WriteStock',
                request_serializer=books__database_dot_books__database__pb2.WriteStockRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.WriteStockResponse.FromString,
                )
        self.DecrementStock = channel.unary_unary(
                '/books_database.BooksDatabaseService/DecrementStock',
                request_serializer=books__database_dot_books__database__pb2.DecrementStockRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.DecrementStockResponse.FromString,
                )
        self.IncrementStock = channel.unary_unary(
                '/books_database.BooksDatabaseService/IncrementStock',
                request_serializer=books__database_dot_books__database__pb2.IncrementStockRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.IncrementStockResponse.FromString,
                )
        self.PrepareTransaction = channel.unary_unary(
                '/books_database.BooksDatabaseService/PrepareTransaction',
                request_serializer=books__database_dot_books__database__pb2.DBPrepareRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.DBVoteTransactionResponse.FromString,
                )
        self.CommitTransaction = channel.unary_unary(
                '/books_database.BooksDatabaseService/CommitTransaction',
                request_serializer=books__database_dot_books__database__pb2.DBTransactionRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.DBAckTransactionResponse.FromString,
                )
        self.AbortTransaction = channel.unary_unary(
                '/books_database.BooksDatabaseService/AbortTransaction',
                request_serializer=books__database_dot_books__database__pb2.DBTransactionRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.DBAckTransactionResponse.FromString,
                )
        self.RequestVote = channel.unary_unary(
                '/books_database.BooksDatabaseService/RequestVote',
                request_serializer=books__database_dot_books__database__pb2.DBVoteRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.DBVoteResponse.FromString,
                )
        self.AppendEntries = channel.unary_unary(
                '/books_database.BooksDatabaseService/AppendEntries',
                request_serializer=books__database_dot_books__database__pb2.DBAppendEntriesRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.DBAppendEntriesResponse.FromString,
                )
        self.InternalReplicate = channel.unary_unary(
                '/books_database.BooksDatabaseService/InternalReplicate',
                request_serializer=books__database_dot_books__database__pb2.InternalReplicateRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.InternalReplicateResponse.FromString,
                )
        self.GetNodeRole = channel.unary_unary(
                '/books_database.BooksDatabaseService/GetNodeRole',
                request_serializer=books__database_dot_books__database__pb2.GetNodeRoleRequest.SerializeToString,
                response_deserializer=books__database_dot_books__database__pb2.GetNodeRoleResponse.FromString,
                )


class BooksDatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadStock(self, request, context):
        """Reads the value of a book's stock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteStock(self, request, context):
        """Writes/sets the value of a book's stock (less common)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecrementStock(self, request, context):
        """Atomically decrements the stock of a book
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IncrementStock(self, request, context):
        """Atomically increments the stock of a book (NEW)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareTransaction(self, request, context):
        """--- 2PC Participant RPCs ---
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestVote(self, request, context):
        """--- Raft related RPCs for this DB service's own Raft group ---
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InternalReplicate(self, request, context):
        """--- Internal RPC for Primary to replicate data to Backups ---
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeRole(self, request, context):
        """--- Helper to find current leader of this DB Raft group ---
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BooksDatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadStock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadStock,
                    request_deserializer=books__database_dot_books__database__pb2.ReadStockRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.ReadStockResponse.SerializeToString,
            ),
            'WriteStock': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteStock,
                    request_deserializer=books__database_dot_books__database__pb2.WriteStockRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.WriteStockResponse.SerializeToString,
            ),
            'DecrementStock': grpc.unary_unary_rpc_method_handler(
                    servicer.DecrementStock,
                    request_deserializer=books__database_dot_books__database__pb2.DecrementStockRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.DecrementStockResponse.SerializeToString,
            ),
            'IncrementStock': grpc.unary_unary_rpc_method_handler(
                    servicer.IncrementStock,
                    request_deserializer=books__database_dot_books__database__pb2.IncrementStockRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.IncrementStockResponse.SerializeToString,
            ),
            'PrepareTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareTransaction,
                    request_deserializer=books__database_dot_books__database__pb2.DBPrepareRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.DBVoteTransactionResponse.SerializeToString,
            ),
            'CommitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitTransaction,
                    request_deserializer=books__database_dot_books__database__pb2.DBTransactionRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.DBAckTransactionResponse.SerializeToString,
            ),
            'AbortTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortTransaction,
                    request_deserializer=books__database_dot_books__database__pb2.DBTransactionRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.DBAckTransactionResponse.SerializeToString,
            ),
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=books__database_dot_books__database__pb2.DBVoteRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.DBVoteResponse.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=books__database_dot_books__database__pb2.DBAppendEntriesRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.DBAppendEntriesResponse.SerializeToString,
            ),
            'InternalReplicate': grpc.unary_unary_rpc_method_handler(
                    servicer.InternalReplicate,
                    request_deserializer=books__database_dot_books__database__pb2.InternalReplicateRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.InternalReplicateResponse.SerializeToString,
            ),
            'GetNodeRole': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeRole,
                    request_deserializer=books__database_dot_books__database__pb2.GetNodeRoleRequest.FromString,
                    response_serializer=books__database_dot_books__database__pb2.GetNodeRoleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'books_database.BooksDatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BooksDatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/ReadStock',
            books__database_dot_books__database__pb2.ReadStockRequest.SerializeToString,
            books__database_dot_books__database__pb2.ReadStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/WriteStock',
            books__database_dot_books__database__pb2.WriteStockRequest.SerializeToString,
            books__database_dot_books__database__pb2.WriteStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecrementStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/DecrementStock',
            books__database_dot_books__database__pb2.DecrementStockRequest.SerializeToString,
            books__database_dot_books__database__pb2.DecrementStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IncrementStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/IncrementStock',
            books__database_dot_books__database__pb2.IncrementStockRequest.SerializeToString,
            books__database_dot_books__database__pb2.IncrementStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/PrepareTransaction',
            books__database_dot_books__database__pb2.DBPrepareRequest.SerializeToString,
            books__database_dot_books__database__pb2.DBVoteTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/CommitTransaction',
            books__database_dot_books__database__pb2.DBTransactionRequest.SerializeToString,
            books__database_dot_books__database__pb2.DBAckTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/AbortTransaction',
            books__database_dot_books__database__pb2.DBTransactionRequest.SerializeToString,
            books__database_dot_books__database__pb2.DBAckTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/RequestVote',
            books__database_dot_books__database__pb2.DBVoteRequest.SerializeToString,
            books__database_dot_books__database__pb2.DBVoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/AppendEntries',
            books__database_dot_books__database__pb2.DBAppendEntriesRequest.SerializeToString,
            books__database_dot_books__database__pb2.DBAppendEntriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InternalReplicate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/InternalReplicate',
            books__database_dot_books__database__pb2.InternalReplicateRequest.SerializeToString,
            books__database_dot_books__database__pb2.InternalReplicateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books_database.BooksDatabaseService/GetNodeRole',
            books__database_dot_books__database__pb2.GetNodeRoleRequest.SerializeToString,
            books__database_dot_books__database__pb2.GetNodeRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
