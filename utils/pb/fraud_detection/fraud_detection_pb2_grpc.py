# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fraud_detection_pb2 as fraud__detection__pb2


class FraudServiceStub(object):
    """
    FraudService is responsible for evaluating whether a transaction is fraudulent.

    The service consists of multiple RPC methods for different stages of the fraud check.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeFraudDetection = channel.unary_unary(
                '/fraud.FraudService/InitializeFraudDetection',
                request_serializer=fraud__detection__pb2.InitRequest.SerializeToString,
                response_deserializer=fraud__detection__pb2.EventResponse.FromString,
                )
        self.CheckUserData = channel.unary_unary(
                '/fraud.FraudService/CheckUserData',
                request_serializer=fraud__detection__pb2.EventRequest.SerializeToString,
                response_deserializer=fraud__detection__pb2.EventResponse.FromString,
                )
        self.CheckCreditCardData = channel.unary_unary(
                '/fraud.FraudService/CheckCreditCardData',
                request_serializer=fraud__detection__pb2.EventRequest.SerializeToString,
                response_deserializer=fraud__detection__pb2.EventResponse.FromString,
                )
        self.ClearFraudCache = channel.unary_unary(
                '/fraud.FraudService/ClearFraudCache',
                request_serializer=fraud__detection__pb2.ClearCacheRequest.SerializeToString,
                response_deserializer=fraud__detection__pb2.ClearCacheResponse.FromString,
                )
        self.DetectFraud = channel.unary_unary(
                '/fraud.FraudService/DetectFraud',
                request_serializer=fraud__detection__pb2.FraudRequest.SerializeToString,
                response_deserializer=fraud__detection__pb2.FraudResponse.FromString,
                )


class FraudServiceServicer(object):
    """
    FraudService is responsible for evaluating whether a transaction is fraudulent.

    The service consists of multiple RPC methods for different stages of the fraud check.
    """

    def InitializeFraudDetection(self, request, context):
        """Initial call to cache data and start the flow for this service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserData(self, request, context):
        """Event d: Check user data for fraud
        Takes EventRequest containing order_id and vector_clock
        Returns EventResponse indicating approval and updated vector_clock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCreditCardData(self, request, context):
        """Event e: Check credit card data for fraud
        Takes EventRequest containing order_id and vector_clock
        Returns EventResponse indicating approval and updated vector_clock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearFraudCache(self, request, context):
        """Bonus: Clear cache for a specific order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectFraud(self, request, context):
        """Original DetectFraud method, kept for potential backward compatibility or simpler use cases.
        Takes FraudRequest containing user and credit card details and returns a FraudResponse
        indicating whether the transaction is approved or flagged as fraudulent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FraudServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeFraudDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeFraudDetection,
                    request_deserializer=fraud__detection__pb2.InitRequest.FromString,
                    response_serializer=fraud__detection__pb2.EventResponse.SerializeToString,
            ),
            'CheckUserData': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserData,
                    request_deserializer=fraud__detection__pb2.EventRequest.FromString,
                    response_serializer=fraud__detection__pb2.EventResponse.SerializeToString,
            ),
            'CheckCreditCardData': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCreditCardData,
                    request_deserializer=fraud__detection__pb2.EventRequest.FromString,
                    response_serializer=fraud__detection__pb2.EventResponse.SerializeToString,
            ),
            'ClearFraudCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearFraudCache,
                    request_deserializer=fraud__detection__pb2.ClearCacheRequest.FromString,
                    response_serializer=fraud__detection__pb2.ClearCacheResponse.SerializeToString,
            ),
            'DetectFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectFraud,
                    request_deserializer=fraud__detection__pb2.FraudRequest.FromString,
                    response_serializer=fraud__detection__pb2.FraudResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fraud.FraudService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FraudService(object):
    """
    FraudService is responsible for evaluating whether a transaction is fraudulent.

    The service consists of multiple RPC methods for different stages of the fraud check.
    """

    @staticmethod
    def InitializeFraudDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fraud.FraudService/InitializeFraudDetection',
            fraud__detection__pb2.InitRequest.SerializeToString,
            fraud__detection__pb2.EventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckUserData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fraud.FraudService/CheckUserData',
            fraud__detection__pb2.EventRequest.SerializeToString,
            fraud__detection__pb2.EventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCreditCardData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fraud.FraudService/CheckCreditCardData',
            fraud__detection__pb2.EventRequest.SerializeToString,
            fraud__detection__pb2.EventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearFraudCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fraud.FraudService/ClearFraudCache',
            fraud__detection__pb2.ClearCacheRequest.SerializeToString,
            fraud__detection__pb2.ClearCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fraud.FraudService/DetectFraud',
            fraud__detection__pb2.FraudRequest.SerializeToString,
            fraud__detection__pb2.FraudResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
