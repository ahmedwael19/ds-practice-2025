syntax = "proto3";

package transaction;

// Common message for vector clock - used for maintaining causal relationships
// between distributed events across the system
message VectorClock {
    map<string, int32> clock = 1;  // Maps service names to logical timestamps
}

// Common message for event requests - provides consistent structure for all event calls
message EventRequest {
    string order_id = 1;           // Unique identifier for the transaction
    VectorClock vector_clock = 2;  // Incoming vector clock state for tracking causality
}

// Common message for event responses - provides consistent structure for all event responses
message EventResponse {
    bool approved = 1;             // Whether the event processing was successful
    string message = 2;            // Human-readable result description or error
    VectorClock vector_clock = 3;  // Updated vector clock reflecting this operation
}

/*
  Item represents a product in a transaction.
  Fields:
   - name: The name of the item being purchased.
   - quantity: The number of units of the item in the order.
 */
message Item {
    string name = 1;
    int32 quantity = 2;
}

/*
  CreditCardInfo contains details about the payment method.

  Fields:
  - number: The credit card number used for the transaction.
  - expirationDate: The expiration date of the credit card in MM/YY or MM/YYYY format.
  - cvv: The card verification value (CVV), a security code usually found on the back of the card.
*/
message CreditCardInfo {
    string number = 1;
    string expirationDate = 2;
    string cvv = 3;
}

/*
  Address contains billing or shipping address information.

  Fields:
  - street: Street address
  - city: City name
  - state: State or province
  - zip: Zip or postal code
  - country: Country name
*/
message Address {
    string street = 1;
    string city = 2;
    string state = 3;
    string zip = 4;
    string country = 5;
}

// Request for initializing the process and caching data
// First message sent to services in the event flow
message InitRequest {
    string order_id = 1;                  // Unique order identifier
    repeated Item items = 2;              // Products being purchased
    CreditCardInfo credit_card = 3;       // Payment method details
    Address billingAddress = 4;           // User's billing address
    bool termsAndConditionsAccepted = 5;  // Terms acceptance flag
    string user_contact = 6;              // User contact information
    string user_name = 7;                 // User name
    VectorClock vector_clock = 8;         // Initial vector clock state
}

// Request to clear cache when an order is complete
message ClearCacheRequest {
    string order_id = 1;                  // Order to clear from cache
    VectorClock final_vector_clock = 2;   // Final state of vector clock
}

// Response after cache clearing attempt
message ClearCacheResponse {
    bool success = 1;                     // Whether cache was cleared successfully
    string message = 2;                   // Details about operation
}

// Service definition for transaction verification operations
service TransactionService {
    // Initial call to cache data and start the flow for this service
    rpc InitializeTransaction (InitRequest) returns (EventResponse);

    // Event a: Verify items are not empty
    rpc VerifyItems (EventRequest) returns (EventResponse);

    // Event b: Verify user data fields are present (basic check)
    rpc VerifyUserData (EventRequest) returns (EventResponse);

    // Event c: Verify credit card format
    rpc VerifyCreditCardFormat (EventRequest) returns (EventResponse);

    // Bonus: Clear cache for a specific order
    rpc ClearTransactionCache (ClearCacheRequest) returns (ClearCacheResponse);

    // Keep original VerifyTransaction for now, maybe deprecate later
    // Or repurpose it if needed, but the new event methods are preferred
    rpc VerifyTransaction (TransactionRequest) returns (TransactionResponse);
}

/*
  TransactionRequest is the input message for the VerifyTransaction RPC.

  Fields:
  - items: A list of purchased items.
  - credit_card: Credit card details used for the transaction.
  - shippingMethod: Method of shipping (standard, express, overnight, etc.)
  - discountCode: Promotional code applied to the transaction
  - billingAddress: Billing address information
  - termsAndConditionsAccepted: Whether the user accepted terms and conditions
*/
message TransactionRequest {
    string order_id = 7;
    repeated Item items = 1;
    CreditCardInfo credit_card = 2;
    string shippingMethod = 3;
    string discountCode = 4;
    Address billingAddress = 5;
    bool termsAndConditionsAccepted = 6;
}

/*
  TransactionResponse is the output message returned by VerifyTransaction.

  Fields:
  - approved: A boolean flag indicating whether the transaction is legitimate (true) or declined (false).
  - message: A message explaining the reason if the transaction is declined.
*/
message TransactionResponse {
    bool approved = 1;
    string message = 2;
}