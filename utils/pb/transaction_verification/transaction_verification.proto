syntax = "proto3";

package transaction;

// Common message for vector clock
message VectorClock {
    map<string, int32> clock = 1;
}

// Common message for event requests
message EventRequest {
    string order_id = 1;
    VectorClock vector_clock = 2; // Incoming clock state
}

// Common message for event responses
message EventResponse {
    bool approved = 1;
    string message = 2;
    VectorClock vector_clock = 3; // Updated clock state
}

// Specific data structures needed by this service
message Item {
    string name = 1;
    int32 quantity = 2;
}

/*
  CreditCardInfo contains details about the payment method.

  Fields:
  - number: The credit card number used for the transaction.
  - expirationDate: The expiration date of the credit card in MM/YY or MM/YYYY format.
  - cvv: The card verification value (CVV), a security code usually found on the back of the card.
*/
message CreditCardInfo {
    string number = 1;
    string expirationDate = 2;
    string cvv = 3;
}

/*
  Address contains billing or shipping address information.

  Fields:
  - street: Street address
  - city: City name
  - state: State or province
  - zip: Zip or postal code
  - country: Country name
*/
message Address {
    string street = 1;
    string city = 2;
    string state = 3;
    string zip = 4;
    string country = 5;
}

// Request for initializing the process and caching data
message InitRequest {
    string order_id = 1;
    repeated Item items = 2;
    CreditCardInfo credit_card = 3;
    Address billingAddress = 4; // Assuming user data includes address
    bool termsAndConditionsAccepted = 5;
    string user_contact = 6; // Added for user data check
    string user_name = 7; // Added for user data check
    VectorClock vector_clock = 8; // Send initial clock from orchestrator
}

// Request to clear cache
message ClearCacheRequest {
    string order_id = 1;
    VectorClock final_vector_clock = 2;
}

message ClearCacheResponse {
    bool success = 1;
    string message = 2;
}


service TransactionService {
    // Initial call to cache data and start the flow for this service
    rpc InitializeTransaction (InitRequest) returns (EventResponse);

    // Event a: Verify items are not empty
    rpc VerifyItems (EventRequest) returns (EventResponse);

    // Event b: Verify user data fields are present (basic check)
    rpc VerifyUserData (EventRequest) returns (EventResponse);

    // Event c: Verify credit card format
    rpc VerifyCreditCardFormat (EventRequest) returns (EventResponse);

    // Bonus: Clear cache for a specific order
    rpc ClearTransactionCache (ClearCacheRequest) returns (ClearCacheResponse);

    // Keep original VerifyTransaction for now, maybe deprecate later
    // Or repurpose it if needed, but the new event methods are preferred
    rpc VerifyTransaction (TransactionRequest) returns (TransactionResponse);
}

/*
  TransactionRequest is the input message for the VerifyTransaction RPC.

  Fields:
  - items: A list of purchased items.
  - credit_card: Credit card details used for the transaction.
  - shippingMethod: Method of shipping (standard, express, overnight, etc.)
  - discountCode: Promotional code applied to the transaction
  - billingAddress: Billing address information
  - termsAndConditionsAccepted: Whether the user accepted terms and conditions
*/
message TransactionRequest {
    string order_id = 7;
    repeated Item items = 1;
    CreditCardInfo credit_card = 2;
    string shippingMethod = 3;
    string discountCode = 4;
    Address billingAddress = 5;
    bool termsAndConditionsAccepted = 6;
    // Note: UserInfo fields (name, contact) are now in InitRequest
}

/*
  TransactionResponse is the output message returned by VerifyTransaction.

  Fields:
  - approved: A boolean flag indicating whether the transaction is legitimate (true) or declined (false).
  - message: A message explaining the reason if the transaction is declined.
*/
message TransactionResponse {
    bool approved = 1;
    string message = 2;
}
